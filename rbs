#!/bin/zsh

BACKUP_DIR="/mnt/backup"
DATE_FORMAT="+%Y-%m-%d_%H:%M:%S"
CUTOFF="3 months ago"
TAG="manual"
TARGETS=("/var" "/boot" "/" "/usr" "/usr/portage" "/home")

alias LOCK="mount -o remount,ro $BACKUP_DIR"
alias UNLOCK="mount -o remount,rw $BACKUP_DIR"

function is_locked() {
  # check for lockfile
  if [[ -f $BACKUP_DIR/rbs.lock ]]; then
    # process already running?
    if [[ "$(ps -p $(cat $BACKUP_DIR/rbs.lock) | wc -l)" -gt 1 ]]; then
      echo "locked"
      return
    fi
  fi
  echo "unlocked"
}

function backup() {
  if [[ $(is_locked) == "locked" ]]; then
    echo "process already running, aborting..."
    exit 1
  fi

  # create lockfile
  UNLOCK
    rm -f $BACKUP_DIR/rbs.lock
    echo $$ > $BACKUP_DIR/rbs.lock
  LOCK

  UNLOCK
    echo "saving daily pigs..."
    mv /home/amon/pigs/daily/* $BACKUP_DIR/daily_pigs/
    echo "pigs saved."
  LOCK

  for origin in $TARGETS
  do
    if [[ $origin != "/" ]] then
      # replace all slashes except the first one by underscore
      target="${origin[1]}${origin[2,-1]:gs,/,_,}"
    else
      target="root"
    fi

    target_dir="$BACKUP_DIR/$target/$TAG/"
    current="$BACKUP_DIR/$target/current"

    echo "backing up $origin to $target_dir..."

    echo "removing old snapshots..."
    cutoff_date=$(date --date=$CUTOFF $DATE_FORMAT)

    for cutoff_dir in $(/usr/bin/ruby19 << RUBY
      pattern =  /
                  (?<date>
                      (?<year>\d+)
                      - 
                      (?<month>\d+)
                      -
                      (?<day>\d+)
                      _
                      (?<hour>\d+)
                      :
                      (?<min>\d+)
                      :
                      (?<sec>\d+)
                  )
                  (_incomplete)?
                  /x

      c = "${cutoff_date}".match(pattern)

      Dir["${target_dir}/*"].each do |dir| 
        if m = dir.match(pattern)
          if m["date"] < c["date"]
            puts dir
          end
        end
      end
RUBY)
    do
      echo "deleting $cutoff_dir"
      UNLOCK
        rm -rf --one-file-system $cutoff_dir
      LOCK
    done

    echo "starting backup..."
    date=$(date $DATE_FORMAT)
    UNLOCK
      mkdir -p $target_dir

      rsync -xaP --delete --delete-excluded \
        --link-dest=$current \
        $origin/ $target_dir/${date}_incomplete \
        \
        && mv $target_dir/${date}_incomplete $target_dir/$date \
        && rm -f $current \
        && ln -s $target_dir/$date $current
    LOCK
    echo "backup complete at $(date)"
  done
    
  # remove lockfile
  UNLOCK
    rm -f $BACKUP_DIR/rbs.lock
  LOCK

  # just to be sure
  LOCK
}
