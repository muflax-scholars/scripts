#!/usr/bin/env python3
# Copyright muflax <mail@muflax.com>, 2010
# License: GNU GPL 3 <http://www.gnu.org/copyleft/gpl.html>

import datetime, re, sys, itertools, random

TODO="/home/amon/txt/todo/todo.txt"
LOG="/home/amon/txt/todo/fume.log"

# From which day on should we start working on the item?
filter_re = re.compile("(\( (?P<year>\d+) / (?P<month>\d+) / (?P<day>\d+) \))",
                     re.X)
today = datetime.date.today()

def parse_date(match):
    year, month, day = (int(match.group("year")),
                        int(match.group("month")),
                        int(match.group("day")))
    date = datetime.date(2000+year, month, day)
    diff = (date - today).days      
    return (diff, year, month, day)

def due(line):
    match = filter_re.search(line)
    if match:
        diff = parse_date(match)[0]
        return diff <= 0
    return True

def priority_of(line):
    m = re.search("\(([A-Z])\) ", line)
    if m:
        return m.group(1)
    else:
        return "~"
        
def suggestions(log_items, priorities):
    sug = []
    log_today = {entry for date, entry in log_items
                 if date == today}
    done = False
    for pri in range(len(priorities)):
        for item in priorities[pri]:
            if item not in log_today:
                sug.append(item)
                done = True
        if done:
            break
    return sug
           
def main():
    with open(TODO) as todo, open(LOG) as log:
        # gather valid todo items
        todo_items = [line.strip() for line in todo
                      if not "@broken" in line
                      and due(line)
                      and not re.match("^\s*$", line)
                     ]
        todo_items.sort()
        if not todo_items:
            sys.exit(1)

        # sort items by priorities
        priorities = [list(g) for k, g 
                      in itertools.groupby(todo_items, priority_of)]
        
        # get log entries
        log_items = []
        for line in log:
            m = re.search("^(\d+) (.*)$", line)
            if m:
                log_items.append((datetime.date.fromtimestamp(int(m.group(1))),
                                  m.group(2).strip()))

        # filter priorities based on what we already did today
        open_suggestions = suggestions(log_items, priorities)

        # already worked on everything, so pick freely
        if not open_suggestions:
            open_suggestions = priorities

        # choose random open suggestion of highest priority
        print(random.choice(open_suggestions))

if __name__ == "__main__":
    main()
