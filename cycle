#!/usr/bin/python
# -*- coding: utf-8 -*-
import datetime as dt
import os, time, sys
#import profile
first_period = dt.date(2009, 2, 2)  # 笑
apocalypse = dt.date(2012, 12, 21)
cycles = [[3,00,  "[onset]", True],
          [8,30,  "[plateau]", False],
          [14,00, "[peak]", False],
          [19,00, "[afterglow]", False],
          [23,00, "[preparation]", False], 
         ]    

dt_cycles = [dt.time(x[0], x[1]) for x in cycles]
l = len(cycles)
debug = False

def find(now, l):
    "returns 0..l-1, corresponding to the current cycle"
    for x in range(l):
        if now < dt_cycles[x]:
            return (x-1)%l
    return l-1

def refresh():
    today = dt.date.today()
    now = dt.datetime.now().time()
    days = (today - first_period).days
    second_days = (apocalypse - today).days
    i = find(now, l)
    no = i + 1 #humans start counting with 1 :) 
    
    if debug:
        for x in range(0,24):
            n = dt.time(x, 0)
            c = dt_cycles[(find(n, l) + 1)%l]
            s = ((60*c.minute + (3600)*c.hour) - (60*n.minute + (3600)*n.hour)) % 86400
            print(x, find(n, l), c, n, s, (s/3600)%24, (s/60)%60)        
        sys.exit(1)
    
    c = dt_cycles[(i+1)%l]
    #task = cycles[i][2]
    #print(now, c, i)
    s = ((60*c.minute + (3600)*c.hour) - (60*now.minute + 3600*now.hour)) % 86400
    print("%d時%02d分" % ((s / 3600)%24, (s/60)%60))
    print(" %d分の%d" % (l,(i-1)%l+1))
    #cmd = "echo "+ "\"cyclewidget.text = separator..heading('C')..': '..heading('%d:%02d')\" | awesome-client" %  ((s / 3600)%24, (s/60)%60)
    #cmd2 = "echo "+ "\"datewidget.text = separator..heading('D')..os.date(': %u, ')..heading(os.date('%H:%M'))..spacer..os.date('%m/%d')..' [" + str(second_days) +"]'\" | awesome-client"
    #print(cmd)
    #print(cmd2)
    #os.system(cmd)
    #os.system(cmd2)

while True:
    refresh()
    time.sleep(10)
#def main():
#    for x in range(50001): refresh()

#profile.run("main()")
