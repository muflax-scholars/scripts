#!/usr/bin/env ruby
# coding: utf-8
# Copyright muflax <mail@muflax.com>, 2011
# License: GNU GPL 3 <http://www.gnu.org/copyleft/gpl.html>

require "optparse"
require "socket"
require "shellwords"

# defaults
options = {
  volume: 0,
  position: :right,
  speed: 1.0,
}
  
# vars
host    = Socket.gethostname
display = ":0.0"
cmd     = ["mplayer"]
pwd     = Dir.pwd

# check if there's a .mw file in the current path and if so, add it as options
if File.exists? ".mw"
  File.open(".mw", "r").each do |line|
    ARGV << line.chomp
  end
end

# parse options
begin
  OptionParser.new do |opts|
    opts.banner = "usage: mw [options]"

    opts.on("-+", "--vol=VOL", Integer, "increase volume by VOL") do |v|
      options[:volume] = v
    end

    opts.on("-l", "--left", "play on left screen") do |l|
      options[:position] = :left
    end

    opts.on("-r", "--right", "play on right screen") do |r|
      options[:position] = :right
    end
    
    opts.on("-x", "--speed SPEED", Float, "increase speed by SPEED") do |s|
      options[:speed] = s
    end

    opts.on("-s", "--sub SUBTITLE", String, "use SUBTITLE file") do |s|
      options[:subtitle] = s
    end

    
    opts.on("-y", "--youtube", "youtube mode") do |y|
      options[:speed] = 1.4
    end
  end.parse!
rescue OptionParser::InvalidOption => e
  cmd << e.to_s.sub(/^invalid option:\s+/, "")
end

# host-specific options
case host
when "azathoth"
  # monitor lags a bit
  if options[:position] == :right
    cmd << "-delay -0.05"
  end

  # screen handling
  case options[:position]
  when :left
    cmd << "-xineramascreen 0"
    system "nvidia-settings -a XVideoSyncToDisplay=DFP-0 >/dev/null"
  when :right
    cmd << "-xineramascreen 1"
    system "nvidia-settings -a XVideoSyncToDisplay=DFP-1 >/dev/null"
  end
end

# audio filter
cmd << "-af-add scaletempo"
if options[:volume].nonzero?
  cmd << "-af-add volume=#{options[:volume]}"
end

# speed increase
if options[:speed] != 1.0
  cmd << "-speed #{options[:speed]}"
end

# subtitle
if options[:subtitle]
  cmd << "-sub '#{options[:subtitle]}'"
end

# begin execution
ENV["DISPLAY"] = display
mplayer = cmd.join(" ") + " " + Shellwords.shelljoin(ARGV)
puts "running '#{mplayer}'..."
system mplayer
