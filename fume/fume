#!/usr/bin/env ruby
# Copyright muflax <mail@muflax.com>, 2011
# License: GNU GPL 3 <http://www.gnu.org/copyleft/gpl.html>

require "highline"

class Fume
  # todo files
  TODO_DIR = File.join(Dir.home, "/spoiler/todo")
  LOG      = File.join(TODO_DIR, "fume.log")
  TODO     = File.join(TODO_DIR, "fume.txt")

  # other tools/files used
  FUMETXT     = "todo.sh -d $HOME/.todo-fume.cfg"
  GET_CONTEXT = "fume_get_context"
  PRE_FILTER  = "gtd_pre_filter"
  SIGNAL      = File.join(Dir.home, "/in/scripts/fume/signal.wav")
  SUME        = "sume"
  TIMETRAP    = "ti"

  def initialize time
    @time = if nil? then 10..20 else time end
    @h = HighLine.new
    @log = File.open(LOG, "a")
  end

  def show_todo
    puts "  -> Incoming transmission! <-"
    system "#{FUMETXT} list"
  end

  def run
    puts "Starting time machine."
    puts "River of time will be fished every #{@time.begin} to #{@time.end} minutes..."

    while true
      begin
        question_me
        
        # wait for next round...
        puts
        puts "Time machine is recharging..."
        sleep @time.to_a.sample * 60

        system "clear"
        system "mplayer -really-quiet #{SIGNAL} &"
        puts "#{color("-> BZZZ <-".center(30), :red)}\a"
      rescue Interrupt
        puts "Time machine boggled, recalibrating..."
      end
    end
  end

  def question_me
    while true
      show_todo
      
      puts
      print "#{keywordify("suggest", :green)} "
      print "#{keywordify("choose", :green)} "
      print "#{keywordify("refresh", :green)} "
      print "#{keywordify("keep on working", :green)} "
      print "#{keywordify("out", :green)} "
      print "#{keywordify("quit", :red)}"
      puts
      input = @h.ask("What do you want to do next? ") do |q|
        q.in = %w{s c r k o q}
        q.character = true
      end
      
      case input
      when "s"
        suggest
      when "c"
        choose
      when "q"
        exit 0
      when "r"
        system "clear"
        next
      when "k"
        break
      when "o"
        system "#{TIMETRAP} out"
        next
      end
      
      # normal execution, done here
      break
    end
  end

  def keywordify string, color
    "(#{color(string[0], color)})#{string[1..-1]}"
  end

  def suggest
    # pick items until a suggestion works
    while true
      suggestion = %x{#{SUME}}

      if suggestion.empty?
        puts "Nothing to do. Sorry."
        return
      end
      
      puts "What about #{pre_filter suggestion}?"
      print "#{keywordify("sure", :green)} "
      print "#{keywordify("nope", :red)}"
      input = @h.ask(" ") do |q|
        q.in = %w{s n}
        q.character = true
      end
      
      id = id_of suggestion
      case input
      when "s"
        work_on id
        return
      when "n"
        procrastinate_on id
      end
    end
  end

  def choose
    id = @h.ask("What item do you want? ", Integer)# {|q| q.}
    work_on id
  end

  def id_of item
    if (m = %x{/bin/grep -nF '#{item}' #{TODO}}.match /^\d+/)
      m[0]
    else
      nil
    end
  end

  def pre_filter string
    %x{echo '#{string}' | #{PRE_FILTER}}.strip
  end

  def get_context item
    %x{echo '#{item}' | #{GET_CONTEXT}}.strip
  end
  
  def work_on id
    item = %x{#{FUMETXT} list_item #{id}}
    puts "Working on #{pre_filter(item)}..."
    @log.write "#{Time.now.strftime("%s")} #{item}"
    
    # extract context the item is in for timetrap
    context = get_context item
    unless context.empty?
      system "#{TIMETRAP} sheet #{context}"

      # add a task
      task = @h.ask("Care to name a specific task? [ENTER to skip]")
      unless task.empty?
        system "#{TIMETRAP} in #{item} - #{task}"
      else
        system "#{TIMETRAP} in #{item}"
      end
    else
      puts "No context found. Aborting."
    end
  end

  def procrastinate_on id
    puts "Transmission error detected. Requesting retry..."
    system "#{FUMETXT} append #{id} @broken"
  end

  Colors = {
    none:"",
    black:"\033[0;30m",
    red:"\033[0;31m",
    green:"\033[0;32m",
    brown:"\033[0;33m",
    blue:"\033[0;34m",
    purple:"\033[0;35m",
    cyan:"\033[0;36m",
    grey:"\033[0;37m",
    light_black:"\033[1;30m",
    light_red:"\033[1;31m",
    light_green:"\033[1;32m",
    light_brown:"\033[1;33m",
    light_blue:"\033[1;34m",
    light_purple:"\033[1;35m",
    light_cyan:"\033[1;36m",
    white:"\033[1;37m",
    reset:"\033[0m",
  }

  def color(str, name)
    "#{Colors[name]}#{str}#{Colors[:reset]}"
  end
end

f = Fume.new 10..20
f.run
